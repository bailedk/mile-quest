#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const cognito_stack_1 = require("../lib/cognito-stack");
const database_stack_1 = require("../lib/database-stack");
const api_stack_1 = require("../lib/api-stack");
const monitoring_stack_1 = require("../lib/monitoring-stack");
const app = new cdk.App();
// Get environment variables
const env = {
    account: process.env.CDK_DEFAULT_ACCOUNT,
    region: process.env.CDK_DEFAULT_REGION || 'us-east-1',
};
const stage = app.node.tryGetContext('stage') || 'staging';
const stackPrefix = `MileQuest-${stage}`;
// Core infrastructure stacks
const cognitoStack = new cognito_stack_1.CognitoStack(app, `${stackPrefix}-Cognito`, {
    env,
    stage,
});
const databaseStack = new database_stack_1.DatabaseStack(app, `${stackPrefix}-Database`, {
    env,
    stage,
});
const apiStack = new api_stack_1.ApiStack(app, `${stackPrefix}-Api`, {
    env,
    stage,
    userPool: cognitoStack.userPool,
    database: databaseStack.database,
});
const monitoringStack = new monitoring_stack_1.MonitoringStack(app, `${stackPrefix}-Monitoring`, {
    env,
    stage,
    api: apiStack.api,
    database: databaseStack.database,
});
// Add dependencies
apiStack.addDependency(cognitoStack);
apiStack.addDependency(databaseStack);
monitoringStack.addDependency(apiStack);
monitoringStack.addDependency(databaseStack);
// Tags
cdk.Tags.of(app).add('Project', 'MileQuest');
cdk.Tags.of(app).add('Environment', stage);
cdk.Tags.of(app).add('ManagedBy', 'CDK');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFDbkMsd0RBQW9EO0FBQ3BELDBEQUFzRDtBQUN0RCxnREFBNEM7QUFDNUMsOERBQTBEO0FBRTFELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLDRCQUE0QjtBQUM1QixNQUFNLEdBQUcsR0FBRztJQUNWLE9BQU8sRUFBRSxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQjtJQUN4QyxNQUFNLEVBQUUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxXQUFXO0NBQ3RELENBQUM7QUFFRixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxTQUFTLENBQUM7QUFDM0QsTUFBTSxXQUFXLEdBQUcsYUFBYSxLQUFLLEVBQUUsQ0FBQztBQUV6Qyw2QkFBNkI7QUFDN0IsTUFBTSxZQUFZLEdBQUcsSUFBSSw0QkFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLFdBQVcsVUFBVSxFQUFFO0lBQ25FLEdBQUc7SUFDSCxLQUFLO0NBQ04sQ0FBQyxDQUFDO0FBRUgsTUFBTSxhQUFhLEdBQUcsSUFBSSw4QkFBYSxDQUFDLEdBQUcsRUFBRSxHQUFHLFdBQVcsV0FBVyxFQUFFO0lBQ3RFLEdBQUc7SUFDSCxLQUFLO0NBQ04sQ0FBQyxDQUFDO0FBRUgsTUFBTSxRQUFRLEdBQUcsSUFBSSxvQkFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLFdBQVcsTUFBTSxFQUFFO0lBQ3ZELEdBQUc7SUFDSCxLQUFLO0lBQ0wsUUFBUSxFQUFFLFlBQVksQ0FBQyxRQUFRO0lBQy9CLFFBQVEsRUFBRSxhQUFhLENBQUMsUUFBUTtDQUNqQyxDQUFDLENBQUM7QUFFSCxNQUFNLGVBQWUsR0FBRyxJQUFJLGtDQUFlLENBQUMsR0FBRyxFQUFFLEdBQUcsV0FBVyxhQUFhLEVBQUU7SUFDNUUsR0FBRztJQUNILEtBQUs7SUFDTCxHQUFHLEVBQUUsUUFBUSxDQUFDLEdBQUc7SUFDakIsUUFBUSxFQUFFLGFBQWEsQ0FBQyxRQUFRO0NBQ2pDLENBQUMsQ0FBQztBQUVILG1CQUFtQjtBQUNuQixRQUFRLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQ3JDLFFBQVEsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDdEMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN4QyxlQUFlLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRTdDLE9BQU87QUFDUCxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzdDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDM0MsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcbmltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJztcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBDb2duaXRvU3RhY2sgfSBmcm9tICcuLi9saWIvY29nbml0by1zdGFjayc7XG5pbXBvcnQgeyBEYXRhYmFzZVN0YWNrIH0gZnJvbSAnLi4vbGliL2RhdGFiYXNlLXN0YWNrJztcbmltcG9ydCB7IEFwaVN0YWNrIH0gZnJvbSAnLi4vbGliL2FwaS1zdGFjayc7XG5pbXBvcnQgeyBNb25pdG9yaW5nU3RhY2sgfSBmcm9tICcuLi9saWIvbW9uaXRvcmluZy1zdGFjayc7XG5cbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5cbi8vIEdldCBlbnZpcm9ubWVudCB2YXJpYWJsZXNcbmNvbnN0IGVudiA9IHtcbiAgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCxcbiAgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04gfHwgJ3VzLWVhc3QtMScsXG59O1xuXG5jb25zdCBzdGFnZSA9IGFwcC5ub2RlLnRyeUdldENvbnRleHQoJ3N0YWdlJykgfHwgJ3N0YWdpbmcnO1xuY29uc3Qgc3RhY2tQcmVmaXggPSBgTWlsZVF1ZXN0LSR7c3RhZ2V9YDtcblxuLy8gQ29yZSBpbmZyYXN0cnVjdHVyZSBzdGFja3NcbmNvbnN0IGNvZ25pdG9TdGFjayA9IG5ldyBDb2duaXRvU3RhY2soYXBwLCBgJHtzdGFja1ByZWZpeH0tQ29nbml0b2AsIHtcbiAgZW52LFxuICBzdGFnZSxcbn0pO1xuXG5jb25zdCBkYXRhYmFzZVN0YWNrID0gbmV3IERhdGFiYXNlU3RhY2soYXBwLCBgJHtzdGFja1ByZWZpeH0tRGF0YWJhc2VgLCB7XG4gIGVudixcbiAgc3RhZ2UsXG59KTtcblxuY29uc3QgYXBpU3RhY2sgPSBuZXcgQXBpU3RhY2soYXBwLCBgJHtzdGFja1ByZWZpeH0tQXBpYCwge1xuICBlbnYsXG4gIHN0YWdlLFxuICB1c2VyUG9vbDogY29nbml0b1N0YWNrLnVzZXJQb29sLFxuICBkYXRhYmFzZTogZGF0YWJhc2VTdGFjay5kYXRhYmFzZSxcbn0pO1xuXG5jb25zdCBtb25pdG9yaW5nU3RhY2sgPSBuZXcgTW9uaXRvcmluZ1N0YWNrKGFwcCwgYCR7c3RhY2tQcmVmaXh9LU1vbml0b3JpbmdgLCB7XG4gIGVudixcbiAgc3RhZ2UsXG4gIGFwaTogYXBpU3RhY2suYXBpLFxuICBkYXRhYmFzZTogZGF0YWJhc2VTdGFjay5kYXRhYmFzZSxcbn0pO1xuXG4vLyBBZGQgZGVwZW5kZW5jaWVzXG5hcGlTdGFjay5hZGREZXBlbmRlbmN5KGNvZ25pdG9TdGFjayk7XG5hcGlTdGFjay5hZGREZXBlbmRlbmN5KGRhdGFiYXNlU3RhY2spO1xubW9uaXRvcmluZ1N0YWNrLmFkZERlcGVuZGVuY3koYXBpU3RhY2spO1xubW9uaXRvcmluZ1N0YWNrLmFkZERlcGVuZGVuY3koZGF0YWJhc2VTdGFjayk7XG5cbi8vIFRhZ3NcbmNkay5UYWdzLm9mKGFwcCkuYWRkKCdQcm9qZWN0JywgJ01pbGVRdWVzdCcpO1xuY2RrLlRhZ3Mub2YoYXBwKS5hZGQoJ0Vudmlyb25tZW50Jywgc3RhZ2UpO1xuY2RrLlRhZ3Mub2YoYXBwKS5hZGQoJ01hbmFnZWRCeScsICdDREsnKTsiXX0=