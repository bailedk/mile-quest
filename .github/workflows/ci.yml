name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mile_quest_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type checking
        run: npm run type-check

      - name: Lint code
        run: npm run lint

      - name: Run tests
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/mile_quest_test

  build:
    name: Build packages
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build packages
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            packages/frontend/.next/
            packages/backend/dist/
            packages/shared/dist/

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy Lambda functions
        run: |
          cd packages/backend
          npm ci
          sam build
          sam deploy --stack-name mile-quest-staging \
            --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              Stage=staging \
              DatabaseUrl=${{ secrets.STAGING_DATABASE_URL }} \
              JwtSecret=${{ secrets.JWT_SECRET }} \
              CorsOrigin=${{ secrets.STAGING_CORS_ORIGIN }}

      - name: Deploy frontend to Amplify
        run: |
          cd packages/frontend
          npm ci
          npx amplify publish --branch develop

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts

      - name: Deploy Lambda functions
        run: |
          cd packages/backend
          npm ci
          sam build
          sam deploy --stack-name mile-quest-production \
            --s3-bucket ${{ secrets.SAM_DEPLOYMENT_BUCKET }} \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              Stage=prod \
              DatabaseUrl=${{ secrets.PRODUCTION_DATABASE_URL }} \
              JwtSecret=${{ secrets.JWT_SECRET }} \
              CorsOrigin=${{ secrets.PRODUCTION_CORS_ORIGIN }}

      - name: Deploy frontend to Amplify
        run: |
          cd packages/frontend
          npm ci
          npx amplify publish --branch main