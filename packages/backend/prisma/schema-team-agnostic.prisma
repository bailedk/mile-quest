// This is the updated schema for team-agnostic activities
// Activities are now tracked at the user level per day
// Team distances are calculated based on team goal date ranges

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                    @id @default(uuid())
  email                   String                    @unique
  name                    String
  avatarUrl               String?
  emailVerified           Boolean                   @default(false)
  cognitoId               String                    @unique
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  deletedAt               DateTime?
  activities              Activity[]
  createdGoals            TeamGoal[]                @relation("GoalCreator")
  sentInvites             TeamInvite[]              @relation("InviteSender")
  receivedInvites         TeamInvite[]              @relation("InviteRecipient")
  teamMemberships         TeamMember[]
  createdTeams            Team[]                    @relation("TeamCreator")
  achievements            UserAchievement[]
  stats                   UserStats?
  notifications           Notification[]
  notificationPreferences NotificationPreference[]

  @@index([email])
  @@index([cognitoId])
  @@map("users")
}

model Team {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  avatarUrl   String?
  isPublic    Boolean      @default(true)
  maxMembers  Int          @default(50)
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  goals       TeamGoal[]
  invites     TeamInvite[]
  members     TeamMember[]
  createdBy   User         @relation("TeamCreator", fields: [createdById], references: [id])

  @@index([isPublic])
  @@index([createdById])
  @@index([name, deletedAt])
  @@index([isPublic, createdAt(sort: Desc)])
  @@map("teams")
}

model TeamMember {
  id       String    @id @default(uuid())
  teamId   String
  userId   String
  role     TeamRole  @default(MEMBER)
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  team     Team      @relation(fields: [teamId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  @@unique([teamId, userId, leftAt])
  @@index([userId])
  @@index([teamId])
  @@index([userId, leftAt, joinedAt(sort: Desc)])
  @@index([teamId, userId, role])
  @@map("team_members")
}

model TeamGoal {
  id             String        @id @default(uuid())
  teamId         String
  name           String
  description    String?
  targetDistance Float         // Total distance in meters
  targetDate     DateTime?
  startDate      DateTime      // When tracking starts for this goal
  endDate        DateTime      // When tracking ends for this goal
  startLocation  Json          // { lat: number, lng: number, address?: string }
  endLocation    Json          // { lat: number, lng: number, address?: string }
  waypoints      Json[]        // Array of waypoint objects
  routePolyline  String        // Encoded polyline for the entire route
  routeData      Json          // Additional route metadata (segments, bounds, etc.)
  status         GoalStatus    @default(DRAFT)
  createdById    String
  completedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      User          @relation("GoalCreator", fields: [createdById], references: [id])
  team           Team          @relation(fields: [teamId], references: [id])
  progress       TeamProgress?

  @@index([teamId])
  @@index([status])
  @@index([teamId, status])
  @@index([startDate, endDate])
  @@map("team_goals")
}

// Activities are now team-agnostic and tracked at user level
model Activity {
  id                 String            @id @default(uuid())
  userId             String
  distance           Float             // Distance in meters
  duration           Int               // Duration in seconds
  timestamp          DateTime          // Single timestamp for the activity
  notes              String?
  source             ActivitySource    @default(MANUAL)
  externalId         String?
  isPrivate          Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  user               User              @relation(fields: [userId], references: [id])
  achievementsEarned UserAchievement[]

  @@unique([source, externalId])
  // Single column indexes
  @@index([userId])
  @@index([timestamp])
  @@index([isPrivate])
  @@index([createdAt])
  
  // Compound indexes for common query patterns
  // For user activity lists with date filtering
  @@index([userId, timestamp(sort: Desc)])
  // For daily aggregations (using date function on timestamp)
  @@index([userId, timestamp, isPrivate])
  // For cursor-based pagination
  @@index([createdAt(sort: Desc), id])
  
  @@map("activities")
}

// View or function to calculate team progress based on member activities
// This would be implemented as a database view or function that:
// 1. Gets all team members for a given team
// 2. Sums their activities within the team goal's date range
// 3. Excludes members who left before the goal end date
model TeamProgress {
  id                  String    @id @default(uuid())
  teamGoalId          String    @unique
  totalDistance       Float     @default(0)
  totalActivities     Int       @default(0)
  totalDuration       Int       @default(0)
  currentSegmentIndex Int       @default(0)
  segmentProgress     Float     @default(0)
  lastActivityAt      DateTime?
  updatedAt           DateTime  @updatedAt
  teamGoal            TeamGoal  @relation(fields: [teamGoalId], references: [id])

  @@map("team_progress")
}

model UserStats {
  id              String    @id @default(uuid())
  userId          String    @unique
  totalDistance   Float     @default(0)
  totalActivities Int       @default(0)
  totalDuration   Int       @default(0)
  currentStreak   Int       @default(0)
  longestStreak   Int       @default(0)
  lastActivityAt  DateTime?
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])

  @@map("user_stats")
}

model TeamInvite {
  id              String       @id @default(uuid())
  teamId          String
  invitedByUserId String
  email           String?
  userId          String?
  code            String       @unique @default(cuid())
  status          InviteStatus @default(PENDING)
  expiresAt       DateTime
  createdAt       DateTime     @default(now())
  acceptedAt      DateTime?
  invitedBy       User         @relation("InviteSender", fields: [invitedByUserId], references: [id])
  team            Team         @relation(fields: [teamId], references: [id])
  user            User?        @relation("InviteRecipient", fields: [userId], references: [id])

  @@index([teamId])
  @@index([email])
  @@index([userId])
  @@index([code])
  @@index([status])
  @@map("team_invites")
}

model Achievement {
  id             String            @id @default(uuid())
  type           String            @unique
  name           String
  description    String
  icon           String
  metadata       Json // Criteria and thresholds
  createdAt      DateTime          @default(now())
  userAchievements UserAchievement[]

  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  activityId    String?
  earnedAt      DateTime    @default(now())
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  activity      Activity?   @relation(fields: [activityId], references: [id])

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@map("user_achievements")
}

model Notification {
  id        String           @id @default(uuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  readAt    DateTime?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id])

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id                    String   @id @default(uuid())
  userId                String
  achievementEarned     Boolean  @default(true)
  weeklyProgress        Boolean  @default(true)
  teamInvites           Boolean  @default(true)
  goalCompleted         Boolean  @default(true)
  newTeamMember         Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  user                  User     @relation(fields: [userId], references: [id])

  @@unique([userId])
  @@map("notification_preferences")
}

enum TeamRole {
  ADMIN
  MEMBER
}

enum GoalStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

enum ActivitySource {
  MANUAL
  STRAVA
  APPLE_HEALTH
  GOOGLE_FIT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum NotificationType {
  ACHIEVEMENT_EARNED
  TEAM_INVITE
  GOAL_COMPLETED
  WEEKLY_SUMMARY
  NEW_TEAM_MEMBER
  GOAL_MILESTONE
}