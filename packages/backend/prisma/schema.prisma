generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String                   @id @default(uuid())
  email                   String                   @unique
  name                    String
  avatarUrl               String?
  emailVerified           Boolean                  @default(false)
  cognitoId               String                   @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  deletedAt               DateTime?
  activities              Activity[]
  notificationPreferences NotificationPreference[]
  notifications           Notification[]
  createdGoals            TeamGoal[]               @relation("GoalCreator")
  sentInvites             TeamInvite[]             @relation("InviteSender")
  receivedInvites         TeamInvite[]             @relation("InviteRecipient")
  teamMemberships         TeamMember[]
  createdTeams            Team[]                   @relation("TeamCreator")
  achievements            UserAchievement[]
  stats                   UserStats?

  @@index([email])
  @@index([cognitoId])
  @@map("users")
}

model Team {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  avatarUrl   String?
  isPublic    Boolean      @default(true)
  maxMembers  Int          @default(50)
  createdById String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  deletedAt   DateTime?
  goals       TeamGoal[]
  invites     TeamInvite[]
  members     TeamMember[]
  createdBy   User         @relation("TeamCreator", fields: [createdById], references: [id])

  @@index([isPublic])
  @@index([createdById])
  @@index([name, deletedAt])
  @@index([isPublic, createdAt(sort: Desc)])
  @@map("teams")
}

model TeamMember {
  id       String    @id @default(uuid())
  teamId   String
  userId   String
  role     TeamRole  @default(MEMBER)
  joinedAt DateTime  @default(now())
  leftAt   DateTime?
  team     Team      @relation(fields: [teamId], references: [id])
  user     User      @relation(fields: [userId], references: [id])

  @@unique([teamId, userId, leftAt])
  @@index([userId])
  @@index([teamId])
  @@index([userId, leftAt, joinedAt(sort: Desc)])
  @@index([teamId, userId, role])
  @@map("team_members")
}

model TeamGoal {
  id             String        @id @default(uuid())
  teamId         String
  name           String
  description    String?
  targetDistance Float
  targetDate     DateTime?
  startDate      DateTime
  endDate        DateTime
  startLocation  Json
  endLocation    Json
  waypoints      Json[]
  routePolyline  String
  routeData      Json
  status         GoalStatus    @default(DRAFT)
  createdById    String
  completedAt    DateTime?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  createdBy      User          @relation("GoalCreator", fields: [createdById], references: [id])
  team           Team          @relation(fields: [teamId], references: [id])
  progress       TeamProgress?

  @@index([teamId])
  @@index([status])
  @@index([teamId, status])
  @@index([startDate, endDate])
  @@index([teamId, status, createdAt(sort: Desc)], map: "idx_team_goals_team_status_created")
  @@map("team_goals")
}

model Activity {
  id                 String            @id @default(uuid())
  userId             String
  distance           Float
  duration           Int
  timestamp          DateTime
  notes              String?
  source             ActivitySource    @default(MANUAL)
  externalId         String?
  isPrivate          Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  user               User              @relation(fields: [userId], references: [id])
  achievementsEarned UserAchievement[]

  @@unique([source, externalId])
  @@index([userId])
  @@index([timestamp])
  @@index([isPrivate])
  @@index([createdAt])
  @@index([userId, timestamp(sort: Desc)])
  @@index([userId, timestamp, isPrivate])
  @@index([createdAt(sort: Desc), id])
  @@map("activities")
}

model TeamProgress {
  id                  String    @id @default(uuid())
  teamGoalId          String    @unique
  totalDistance       Float     @default(0)
  totalActivities     Int       @default(0)
  totalDuration       Int       @default(0)
  currentSegmentIndex Int       @default(0)
  segmentProgress     Float     @default(0)
  lastActivityAt      DateTime?
  updatedAt           DateTime  @updatedAt
  teamGoal            TeamGoal  @relation(fields: [teamGoalId], references: [id])

  @@map("team_progress")
}

model UserStats {
  id              String    @id @default(uuid())
  userId          String    @unique
  totalDistance   Float     @default(0)
  totalActivities Int       @default(0)
  totalDuration   Int       @default(0)
  currentStreak   Int       @default(0)
  longestStreak   Int       @default(0)
  lastActivityAt  DateTime?
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id])

  @@map("user_stats")
}

model TeamInvite {
  id              String       @id @default(uuid())
  teamId          String
  invitedByUserId String
  email           String?
  userId          String?
  code            String       @unique @default(cuid())
  status          InviteStatus @default(PENDING)
  expiresAt       DateTime
  createdAt       DateTime     @default(now())
  acceptedAt      DateTime?
  invitedBy       User         @relation("InviteSender", fields: [invitedByUserId], references: [id])
  team            Team         @relation(fields: [teamId], references: [id])
  user            User?        @relation("InviteRecipient", fields: [userId], references: [id])

  @@index([teamId])
  @@index([email])
  @@index([userId])
  @@index([status])
  @@index([code])
  @@index([code, status, expiresAt])
  @@map("team_invites")
}

model Achievement {
  id               String              @id @default(uuid())
  key              String              @unique
  name             String
  description      String
  iconUrl          String
  category         AchievementCategory
  criteria         Json
  points           Int                 @default(10)
  createdAt        DateTime            @default(now())
  userAchievements UserAchievement[]

  @@index([category])
  @@map("achievements")
}

model UserAchievement {
  id            String      @id @default(uuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  teamId        String?
  activityId    String?
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  activity      Activity?   @relation(fields: [activityId], references: [id])
  user          User        @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([earnedAt])
  @@index([userId, earnedAt(sort: Desc)], map: "idx_user_achievements_user_earned")
  @@map("user_achievements")
}

model NotificationTemplate {
  id            String               @id @default(uuid())
  key           String               @unique
  name          String
  description   String?
  category      NotificationCategory
  priority      NotificationPriority @default(MEDIUM)
  subject       String
  content       String
  emailContent  String?
  variables     Json                 @default("[]")
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  notifications Notification[]

  @@index([category])
  @@index([isActive])
  @@map("notification_templates")
}

model Notification {
  id           String                @id @default(uuid())
  userId       String
  templateId   String?
  type         NotificationType
  category     NotificationCategory
  priority     NotificationPriority  @default(MEDIUM)
  title        String
  content      String
  data         Json?
  channels     NotificationChannel[] @default([REALTIME])
  status       NotificationStatus    @default(PENDING)
  scheduledFor DateTime?
  sentAt       DateTime?
  readAt       DateTime?
  clickedAt    DateTime?
  expiresAt    DateTime?
  retryCount   Int                   @default(0)
  maxRetries   Int                   @default(3)
  lastError    String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  template     NotificationTemplate? @relation(fields: [templateId], references: [id])
  user         User                  @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([status])
  @@index([scheduledFor])
  @@index([userId, status])
  @@index([userId, createdAt(sort: Desc)])
  @@index([status, scheduledFor])
  @@index([expiresAt])
  @@map("notifications")
}

model NotificationPreference {
  id              String                @id @default(uuid())
  userId          String
  category        NotificationCategory
  channels        NotificationChannel[]
  isEnabled       Boolean               @default(true)
  quietHoursStart String?
  quietHoursEnd   String?
  timezone        String?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  user            User                  @relation(fields: [userId], references: [id])

  @@unique([userId, category])
  @@index([userId])
  @@index([category])
  @@map("notification_preferences")
}

model NotificationBatch {
  id           String                  @id @default(uuid())
  name         String?
  description  String?
  type         NotificationType
  category     NotificationCategory
  totalCount   Int                     @default(0)
  sentCount    Int                     @default(0)
  failedCount  Int                     @default(0)
  status       NotificationBatchStatus @default(PENDING)
  scheduledFor DateTime?
  startedAt    DateTime?
  completedAt  DateTime?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  @@index([status])
  @@index([scheduledFor])
  @@index([type])
  @@index([category])
  @@map("notification_batches")
}

enum TeamRole {
  ADMIN
  MEMBER
}

enum GoalStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ActivitySource {
  MANUAL
  STRAVA
  APPLE_HEALTH
  GOOGLE_FIT
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum AchievementCategory {
  DISTANCE
  STREAK
  SPEED
  TEAM
  SPECIAL
}

enum NotificationType {
  ACTIVITY_CREATED
  ACTIVITY_MILESTONE
  TEAM_MEMBER_JOINED
  TEAM_GOAL_CREATED
  TEAM_GOAL_COMPLETED
  TEAM_GOAL_MILESTONE
  ACHIEVEMENT_EARNED
  ACHIEVEMENT_STREAK
  SYSTEM_ANNOUNCEMENT
  SYSTEM_UPDATE
  SYSTEM_MAINTENANCE
  REMINDER_ACTIVITY
  REMINDER_GOAL_DEADLINE
  INVITE_RECEIVED
  INVITE_ACCEPTED
  LEADERBOARD_POSITION
}

enum NotificationCategory {
  ACTIVITY
  TEAM
  ACHIEVEMENT
  SYSTEM
  REMINDER
  SOCIAL
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationChannel {
  REALTIME
  EMAIL
  PUSH
}

enum NotificationStatus {
  PENDING
  SCHEDULED
  SENT
  DELIVERED
  READ
  CLICKED
  FAILED
  EXPIRED
  CANCELLED
}

enum NotificationBatchStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}
