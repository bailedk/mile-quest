AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Mile Quest Backend API

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: nodejs20.x
    Architectures:
      - arm64
    Environment:
      Variables:
        DATABASE_URL: !Ref DatabaseUrl
        JWT_SECRET: !Ref JwtSecret
        CORS_ORIGIN: !Ref CorsOrigin
        LOG_LEVEL: !Ref LogLevel
        NODE_ENV: !Ref Stage
        AWS_LAMBDA_LOG_FORMAT: JSON
        AWS_LAMBDA_LOG_LEVEL: !Ref LogLevel
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON
      ApplicationLogLevel: !Ref LogLevel
      SystemLogLevel: INFO

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  DatabaseUrl:
    Type: String
    Description: PostgreSQL connection string
  JwtSecret:
    Type: String
    Description: JWT secret for token verification
    NoEcho: true
  CorsOrigin:
    Type: String
    Default: "https://localhost:3000"
    Description: CORS origin for API
  LogLevel:
    Type: String
    Default: "INFO"
    AllowedValues: ["DEBUG", "INFO", "WARN", "ERROR"]
    Description: Logging level for Lambda functions
  PusherKey:
    Type: String
    Description: Pusher application key for WebSocket connections
    Default: "mock-pusher-key"
  PusherSecret:
    Type: String
    Description: Pusher application secret for WebSocket authentication
    NoEcho: true
    Default: "mock-pusher-secret"

Conditions:
  IsProduction: !Equals [!Ref Stage, "prod"]
  IsStaging: !Equals [!Ref Stage, "staging"]
  IsDevelopment: !Equals [!Ref Stage, "dev"]

Resources:
  # Lambda Execution Role with CloudWatch permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: CloudWatchLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*'
        - PolicyName: DatabaseAccessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - rds:DescribeDBInstances
                  - rds:DescribeDBClusters
                Resource: '*'

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{"requestTime":"$context.requestTime","requestId":"$context.requestId","httpMethod":"$context.httpMethod","path":"$context.path","resourcePath":"$context.resourcePath","status":"$context.status","responseLatency":"$context.responseLatency","xrayTraceId":"$context.xrayTraceId","integrationRequestId":"$context.integration.requestId","functionResponseStatus":"$context.integration.status","integrationLatency":"$context.integration.latency","integrationServiceStatus":"$context.integration.integrationStatus","ip":"$context.identity.sourceIp","userAgent":"$context.identity.userAgent"}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: true
          MetricsEnabled: true

  # API Gateway Access Log Group
  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/${AWS::StackName}-${Stage}'
      RetentionInDays: !If [IsProduction, 30, 7]

  # CloudWatch Log Groups for Lambda Functions
  HealthFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-HealthFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  AuthFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-AuthFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  UsersFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-UsersFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  TeamsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-TeamsFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  ActivitiesFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-ActivitiesFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  DashboardFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-DashboardFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  ProgressFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-ProgressFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  LeaderboardsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-LeaderboardsFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  WebSocketFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-WebSocketFunction'
      RetentionInDays: !If [IsProduction, 30, 7]

  # Lambda Functions
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/health/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref HealthFunctionLogGroup
      Events:
        HealthCheck:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /health
            Method: GET

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/auth/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref AuthFunctionLogGroup
      Events:
        AuthProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/{proxy+}
            Method: ANY

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/users/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref UsersFunctionLogGroup
      Events:
        UsersProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{proxy+}
            Method: ANY

  TeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/teams/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref TeamsFunctionLogGroup
      Events:
        TeamsRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /teams
            Method: ANY
        TeamsProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /teams/{proxy+}
            Method: ANY

  ActivitiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/activities/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref ActivitiesFunctionLogGroup
      Events:
        ActivitiesRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /activities
            Method: ANY
        ActivitiesProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /activities/{proxy+}
            Method: ANY

  DashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/dashboard/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref DashboardFunctionLogGroup
      Events:
        DashboardGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /dashboard
            Method: GET

  ProgressFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/progress/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref ProgressFunctionLogGroup
      Events:
        ProgressProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /progress/{proxy+}
            Method: ANY

  LeaderboardsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/leaderboards/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref LeaderboardsFunctionLogGroup
      Events:
        LeaderboardsGlobal:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /leaderboards/global
            Method: GET
        TeamLeaderboard:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /teams/{teamId}/leaderboard
            Method: GET
        TeamLeaderboardRank:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /teams/{teamId}/leaderboard/rank
            Method: GET

  WebSocketFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/websocket/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref WebSocketFunctionLogGroup
      Environment:
        Variables:
          PUSHER_SECRET: !Ref PusherSecret
          PUSHER_KEY: !Ref PusherKey
      Events:
        WebSocketAuthPost:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /websocket/auth
            Method: POST
        WebSocketTokenGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /websocket/token
            Method: GET

  ScheduledFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AWS::StackName}-${Stage}-ScheduledFunction'
      RetentionInDays: 7

  ScheduledFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/scheduled/
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      LoggingConfig:
        LogGroup: !Ref ScheduledFunctionLogGroup
      Events:
        DailySummarySchedule:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 8 * * ? *)'  # 8 AM UTC daily
            Name: !Sub '${AWS::StackName}-${Stage}-DailySummary'
            Description: 'Daily progress summary for all teams'
            Input: '{"detail": {"jobType": "daily-summary"}}'
        EncouragementCheckSchedule:
          Type: Schedule
          Properties:
            Schedule: 'rate(4 hours)'  # Every 4 hours
            Name: !Sub '${AWS::StackName}-${Stage}-EncouragementCheck'
            Description: 'Check teams that need encouragement'
            Input: '{"detail": {"jobType": "encouragement-check"}}'
        WeeklyCleanupSchedule:
          Type: Schedule
          Properties:
            Schedule: 'cron(0 2 ? * SUN *)'  # 2 AM UTC on Sundays
            Name: !Sub '${AWS::StackName}-${Stage}-WeeklyCleanup'
            Description: 'Clean up old progress data'
            Input: '{"detail": {"jobType": "cleanup"}}'

  # CloudWatch Dashboard for monitoring
  MileQuestDashboard:
    Type: AWS::CloudWatch::Dashboard
    Properties:
      DashboardName: !Sub '${AWS::StackName}-${Stage}-Dashboard'
      DashboardBody: !Sub |
        {
          "widgets": [
            {
              "type": "metric",
              "properties": {
                "metrics": [
                  [ "AWS/Lambda", "Invocations", { "stat": "Sum" } ],
                  [ ".", "Errors", { "stat": "Sum" } ],
                  [ ".", "Duration", { "stat": "Average" } ]
                ],
                "period": 300,
                "stat": "Average",
                "region": "${AWS::Region}",
                "title": "Lambda Metrics"
              }
            },
            {
              "type": "log",
              "properties": {
                "query": "SOURCE '/aws/lambda/${AWS::StackName}-${Stage}-*'\n| fields @timestamp, @message\n| filter @type = \"REPORT\"\n| stats count() by bin(5m)",
                "region": "${AWS::Region}",
                "title": "Lambda Invocations Over Time"
              }
            }
          ]
        }

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"
  
  CloudWatchDashboard:
    Description: "CloudWatch Dashboard URL"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/cloudwatch/home?region=${AWS::Region}#dashboards:name=${AWS::StackName}-${Stage}-Dashboard"
    Export:
      Name: !Sub "${AWS::StackName}-DashboardUrl"
  
  LogGroupNames:
    Description: "CloudWatch Log Group Names for Lambda Functions"
    Value: !Sub |
      Health: /aws/lambda/${AWS::StackName}-${Stage}-HealthFunction
      Auth: /aws/lambda/${AWS::StackName}-${Stage}-AuthFunction
      Users: /aws/lambda/${AWS::StackName}-${Stage}-UsersFunction
      Teams: /aws/lambda/${AWS::StackName}-${Stage}-TeamsFunction
      Activities: /aws/lambda/${AWS::StackName}-${Stage}-ActivitiesFunction
      Dashboard: /aws/lambda/${AWS::StackName}-${Stage}-DashboardFunction
      Progress: /aws/lambda/${AWS::StackName}-${Stage}-ProgressFunction
      WebSocket: /aws/lambda/${AWS::StackName}-${Stage}-WebSocketFunction
      Scheduled: /aws/lambda/${AWS::StackName}-${Stage}-ScheduledFunction
      API Gateway: /aws/apigateway/${AWS::StackName}-${Stage}