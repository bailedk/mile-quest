AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Mile Quest Backend API

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: nodejs20.x
    Architectures:
      - arm64
    Environment:
      Variables:
        DATABASE_URL: !Ref DatabaseUrl
        JWT_SECRET: !Ref JwtSecret
        CORS_ORIGIN: !Ref CorsOrigin

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]
  DatabaseUrl:
    Type: String
    Description: PostgreSQL connection string
  JwtSecret:
    Type: String
    Description: JWT secret for token verification
    NoEcho: true
  CorsOrigin:
    Type: String
    Default: "https://localhost:3000"
    Description: CORS origin for API

Resources:
  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"

  # Lambda Functions
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/health/
      Handler: index.handler
      Events:
        HealthCheck:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /health
            Method: GET

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/auth/
      Handler: index.handler
      Events:
        AuthProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/{proxy+}
            Method: ANY

  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/users/
      Handler: index.handler
      Events:
        UsersProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{proxy+}
            Method: ANY

  TeamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/teams/
      Handler: index.handler
      Events:
        TeamsProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /teams/{proxy+}
            Method: ANY

  ActivitiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/activities/
      Handler: index.handler
      Events:
        ActivitiesProxy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /activities/{proxy+}
            Method: ANY

  DashboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/lambda/dashboard/
      Handler: index.handler
      Events:
        DashboardGet:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /dashboard
            Method: GET

Outputs:
  ApiGatewayEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"